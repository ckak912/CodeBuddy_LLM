{"version":"45","basics":{"title":"User Study 2023","visible":true},"details":{"introduction":"## Instructors: Harrison Bland \u0026 Charlie Kake-White\r\n\r\n#### Here you will find the user study assignment for testing the functionality of our LLM tutor using novice programmers. In total there are 3 exercises to complete, of which you will have 20 minutes per exercise to complete. Don't worry if you aren't able to complete all 3 exercises, the main objective of this user study is to discover how helpful our LLM Tutor is for helping novice programmers with their programming assignments. Ensure to keep note of any questions you may have about our user study, we are happy to take any and all feedback at the end of the study.","date_created":"2023-06-21 04:41:07.138690","date_updated":"2023-09-18 05:43:11.980650","start_date":null,"due_date":null,"allow_late":0,"late_percent":null,"view_answer_late":0,"allowed_ip_addresses":"","allowed_external_urls":"","enable_help_requests":0,"has_timer":0,"hour_timer":null,"minute_timer":null,"restrict_other_assignments":0,"due_date_passed":null},"exercises":{"Automated Student Grade Calculator and Feedback":{"basics":{"enable_pair_programming":0,"title":"Automated Student Grade Calculator and Feedback","visible":1},"details":{"instructions":"## Description:\n\nYou are tasked with creating a program that calculates the average grade of a student based on their individual subject grades and provides feedback based on the average grade obtained. Since the program will run without user input, you'll need to define the input data within the program itself.\n\n## Requirements:\n\nImplement a function called calculate_average_grade that takes an array of subject grades as input.\n\nThe grades are represented as integers ranging from 0 to 100.\nThe function should calculate and return the average grade.\nImplement a function called provide_feedback that takes the average grade as input.\n\nBased on the average grade, the function should provide feedback according to the following criteria:\n- If the average grade is below 40, return \"You need to improve your performance.\"\n- If the average grade is between 40 and 70 (both inclusive), return \"Your performance is satisfactory.\"\n- If the average grade is above 70, return \"You have excelled in your studies.\"\n\nImplement a main program that simulates entering the number of subjects and grades.\n\nDefine an array of subject grades (integers) for testing purposes.\nCall the calculate_average_grade function with the test grades as input and store the result.\nCall the provide_feedback function with the average grade as input and print the feedback.\n\n## Instructions:\n\nYour task is to implement the required functions and main program to achieve the above functionality. The program should not rely on user input, as it will be executed without a console.\n\nFeel free to enhance the program with additional features or modifications as you see fit. Ensure that the program handles the provided test data gracefully and provides appropriate feedback messages.","back_end":"python_testing_only","output_type":"txt","allow_any_response":0,"solution_code":"# Step 1: Define an array called 'subject_grades' that holds subject grades as integers.\nsubject_grades = [80, 75, 90, 85, 95]\n\n# Step 2: Create a function called 'calculate_average_grade' that takes 'subject_grades' as input.\ndef calculate_average_grade(subject_grades):\n    # Step 3: Inside the 'calculate_average_grade' function, calculate the sum of grades in 'subject_grades'.\n    grade_sum = sum(subject_grades)\n    \n    # Step 4: Divide the sum by the number of grades to calculate the average grade.\n    average_grade = grade_sum \/ len(subject_grades)\n    \n    # Step 5: Return the average grade.\n    return average_grade\n\n# Step 6: Create a function called 'provide_feedback' that takes the average grade as input.\ndef provide_feedback(average_grade):\n    # Step 7: Inside the 'provide_feedback' function, use conditional statements to provide feedback based on the average grade.\n    if average_grade \u003e= 90:\n        feedback = \"Excellent performance!\"\n    elif average_grade \u003e= 80:\n        feedback = \"Good job!\"\n    elif average_grade \u003e= 70:\n        feedback = \"Average performance.\"\n    else:\n        feedback = \"Needs improvement.\"\n    \n    # Step 8: Return the appropriate feedback message.\n    return feedback\n\n# Step 10: Call the 'calculate_average_grade' function with 'subject_grades' as input and store the result in a variable.\naverage_grade = calculate_average_grade(subject_grades)\n\n# Step 11: Call the 'provide_feedback' function with the average grade as input and store the feedback message in a variable.\nfeedback_message = provide_feedback(average_grade)\n\n# Step 12: Print the feedback message to display the student's performance feedback.\nprint(feedback_message)\n\n# Step 13: Test the program with different sets of test grades to ensure it calculates the average grade and provides accurate feedback.","solution_description":"","hint":"","max_submissions":0,"starter_code":"","credit":"","data_files":[],"what_students_see_after_success":1,"date_created":"2023-06-21 04:41:31.947480","date_updated":"2023-09-18 06:40:55.745893","enable_pair_programming":0,"verification_code":"","weight":1.0,"tests":{"Default test":{"before_code":"","after_code":"","instructions":"","can_see_test_code":1,"can_see_expected_output":1,"can_see_code_output":1,"txt_output":"Good job!","jpg_output":""}}}},"Palindrome Detective":{"basics":{"enable_pair_programming":0,"title":"Palindrome Detective","visible":1},"details":{"instructions":"## Task Description:\n\nWelcome, aspiring programmers! In this engaging exercise, we're going to dive into the intriguing world of palindromes. A palindrome is a sequence of characters that reads the same forward and backward, and your mission is to create a Python program that can identify them.\n\n## Task Requirements:\n\nStarting Point: You'll be provided with a pre-defined string variable within the program. Think of this as your detective case file; it contains a word or phrase you'll investigate for palindrome clues. For example, you might be handed the case of word = \"racecar\" or phrase = \"A man, a plan, a canal, Panama!\".\n\nInvestigation: Your task is to craft Python code that will thoroughly inspect this provided string for signs of a palindrome. Your code should be able to recognize palindromes regardless of capitalization and should be able to disregard spaces and punctuation marks.\n\nVerdict: Once your investigation is complete, your program should deliver its verdict. If the string you were given is indeed a palindrome, your code should announce this with pride: \"The word\/phrase is a palindrome!\" But if it's not a palindrome, your code should communicate that with honesty: \"The word\/phrase is not a palindrome.\"\n\nDetective's Toolkit: Make sure your detective work is equipped with case-insensitivity, meaning that uppercase and lowercase letters are treated as equivalent. For instance, \"Racecar\" should also be identified as a palindrome. Also, ensure that spaces and punctuation marks are left out of your scrutiny.\n\nMultiple Cases: Our detective work doesn't stop at just one case. Implement your code within a loop that allows you to investigate multiple pre-defined strings, one after the other. Be ready for multiple mysteries!\n\nThis intriguing task will challenge you to unravel the secrets of palindromes while honing your skills in Python programming. It's a puzzle that'll take about as much time as our previous average grade calculator, making it a fantastic next step in your programming journey. So, gear up, detective, and let's solve some palindrome mysteries!","back_end":"python_testing_only","output_type":"txt","allow_any_response":0,"solution_code":"# Step 1: Define a list of pre-defined strings to investigate for palindromes.\nstrings = [\"Madam\", \"racecar\", \"A man, a plan, a canal: Panama\", \"Python\", \"level\"]\r\n\r\n# Step 2: Create a loop to iterate through each string in the list.\r\nfor string in strings:\r\n    # Step 3: Inside the loop, remove spaces and punctuation marks from the current string.\r\n    cleaned_string = \"\"\r\n    for char in string:\r\n        if char.isalnum():\r\n            cleaned_string += char\r\n\r\n    # Step 4: Convert the cleaned string to lowercase to ensure case-insensitivity.\r\n    cleaned_string = cleaned_string.lower()\r\n\r\n    # Step 5: Check if the cleaned lowercase string reads the same forward and backward.\r\n    reversed_string = cleaned_string[::-1]\r\n    if cleaned_string == reversed_string:\r\n        # Step 6: If the string is a palindrome, print 'The word\/phrase is a palindrome!'\r\n        print(f\"The word\/phrase '{string}' is a palindrome!\")\r\n    else:\r\n        # Step 7: If the string is not a palindrome, print 'The word\/phrase is not a palindrome.'\r\n        print(f\"The word\/phrase '{string}' is not a palindrome.\")\r\n\r\n    # Step 8: Continue the loop to investigate the next pre-defined string.\r\n\r\n# Step 9: After investigating all strings, end the program.","solution_description":"","hint":"","max_submissions":0,"starter_code":"","credit":"","data_files":[],"what_students_see_after_success":1,"date_created":"2023-09-18 06:48:01.638430","date_updated":"2023-09-18 06:48:01.638430","enable_pair_programming":0,"verification_code":"","weight":1.0,"tests":{"Default test":{"before_code":"","after_code":"","instructions":"","can_see_test_code":1,"can_see_expected_output":1,"can_see_code_output":1,"txt_output":"The word\/phrase 'Madam' is a palindrome!\nThe word\/phrase 'racecar' is a palindrome!\nThe word\/phrase 'A man, a plan, a canal: Panama' is a palindrome!\nThe word\/phrase 'Python' is not a palindrome.\nThe word\/phrase 'level' is a palindrome!","jpg_output":""}}}},"Simple Interest Calculator":{"basics":{"enable_pair_programming":0,"title":"Simple Interest Calculator","visible":1},"details":{"instructions":"## Task Description:\n\nIn this task, you'll create a Python program that calculates simple interest for a loan or investment. Simple interest is a fundamental concept in finance and a great exercise for beginner programmers.\n\n## Task Requirements:\n\nInput Principal Amount: Implement a function called get_principal_amount that takes no arguments. Inside this function, set a predefined principal amount, e.g., $1000.\n\nInput Interest Rate: Implement a function called get_interest_rate that takes no arguments. Inside this function, set a predefined annual interest rate as a decimal (e.g., 0.05 for 5%).\n\nInput Time (in years): Implement a function called get_time_period that takes no arguments. Inside this function, set a predefined time period in years, e.g., 2 years.\n\nCalculate Simple Interest: Create a function called calculate_simple_interest that calculates and returns the simple interest based on the principal amount, interest rate, and time period. Use the formula: Simple Interest = Principal Amount * Annual Interest Rate * Time Period.\n\nDisplay Result: In the main part of your program, call the above functions to input data and calculate the simple interest. Then, display the calculated simple interest.\n\n## Example Output:\n\nPrincipal Amount: $1000\nAnnual Interest Rate: 5%\nTime Period: 2 years\nSimple Interest: $100.0\n\nThis task allows you to practice defining functions, performing calculations, and displaying results\u2014all essential skills for a budding programmer. Plus, it's a practical concept you can apply in real-life financial situations. Happy coding!","back_end":"python_testing_only","output_type":"txt","allow_any_response":0,"solution_code":"# Step 1: Define a function called get_principal_amount. This function doesn't take any arguments.\ndef get_principal_amount():\r\n    # Step 2: Inside the get_principal_amount function, set a predefined principal amount, for example, $1000.\r\n    principal_amount = 1000\r\n    return principal_amount\r\n\r\n# Step 3: Define another function called get_interest_rate. Like the previous one, this function doesn't take any arguments.\r\ndef get_interest_rate():\r\n    # Step 4: Inside the get_interest_rate function, set a predefined annual interest rate as a decimal. For example, 0.05 for 5%.\r\n    interest_rate = 0.05\r\n    return interest_rate\r\n\r\n# Step 5: Create a function called get_time_period, which also takes no arguments.\r\ndef get_time_period():\r\n    # Step 6: Inside the get_time_period function, set a predefined time period in years, e.g., 2 years.\r\n    time_period = 2\r\n    return time_period\r\n\r\n# Step 7: Now, implement the main function called calculate_simple_interest. \r\n# This function should take the principal amount, interest rate, and time period as arguments \r\n# and calculate the simple interest using the formula: Simple Interest = Principal Amount * Annual Interest Rate * Time Period.\r\ndef calculate_simple_interest(principal_amount, interest_rate, time_period):\r\n    simple_interest = principal_amount * interest_rate * time_period\r\n    return simple_interest\r\n\r\n# Step 8: In the main part of your program, call the get_principal_amount, get_interest_rate, and get_time_period functions to input data and store the results.\r\nprincipal_amount = get_principal_amount()\r\ninterest_rate = get_interest_rate()\r\ntime_period = get_time_period()\r\n\r\n# Step 9: Next, call the calculate_simple_interest function with the obtained data as arguments to calculate the simple interest.\r\nsimple_interest = calculate_simple_interest(principal_amount, interest_rate, time_period)\r\n\r\n# Step 10: Finally, display the calculated simple interest along with the other input values.\r\nprint(\"Principal Amount:\", principal_amount)\r\nprint(\"Interest Rate:\", interest_rate)\r\nprint(\"Time Period:\", time_period)\r\nprint(\"Simple Interest:\", simple_interest)","solution_description":"","hint":"","max_submissions":0,"starter_code":"","credit":"","data_files":[],"what_students_see_after_success":1,"date_created":"2023-09-18 06:49:53.340243","date_updated":"2023-09-18 06:49:53.340243","enable_pair_programming":0,"verification_code":"","weight":1.0,"tests":{"Default test":{"before_code":"","after_code":"","instructions":"","can_see_test_code":1,"can_see_expected_output":1,"can_see_code_output":1,"txt_output":"Principal Amount: 1000\nInterest Rate: 0.05\nTime Period: 2\nSimple Interest: 100.0","jpg_output":""}}}}}}